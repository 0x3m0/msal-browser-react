{"version":3,"sources":["msal-context.js","auth-config.js","Welcome.js","App.js","serviceWorker.js","index.js"],"names":["ua","window","navigator","userAgent","msie","indexOf","msie11","msedge","isIE","isEdge","MsalContext","React","createContext","useMsal","useContext","MsalProvider","children","config","useState","isAuthenticated","setIsAuthenticated","user","setUser","token","setToken","publicClient","setPublicClient","loading","setLoading","popupOpen","setPopupOpen","loginError","setLoginError","useEffect","pc","msal","handleRedirectPromise","then","response","getAccount","accessToken","catch","error","console","log","login","loginRequest","method","a","signInType","loginPopup","loginRedirect","getTokenPopup","acquireTokenSilent","acquireTokenPopup","getTokenRedirect","acquireTokenRedirect","getToken","Provider","value","logout","scopes","forceRefresh","apiRequest","Welcome","userName","onClick","message","App","className","Boolean","location","hostname","match","ReactDOM","render","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.397c7fb7.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport * as msal from \"@azure/msal-browser\";\r\n\r\nconst ua = window.navigator.userAgent;\r\nconst msie = ua.indexOf(\"MSIE \");\r\nconst msie11 = ua.indexOf(\"Trident/\");\r\nconst msedge = ua.indexOf(\"Edge/\");\r\nconst isIE = msie > 0 || msie11 > 0;\r\nconst isEdge = msedge > 0;\r\n\r\nexport const MsalContext = React.createContext();\r\nexport const useMsal = () => useContext(MsalContext);\r\nexport const MsalProvider = ({\r\n    children,\r\n    config\r\n}) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState();\r\n    const [user, setUser] = useState();\r\n    const [token, setToken] = useState();\r\n    const [publicClient, setPublicClient] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const [popupOpen, setPopupOpen] = useState(false);\r\n    const [loginError, setLoginError] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        const pc = new msal.PublicClientApplication(config);\r\n        setPublicClient(pc);\r\n\r\n        pc.handleRedirectPromise().then((response) => \r\n        {\r\n            setLoading(false);\r\n            if (response) {\r\n                setUser(pc.getAccount());\r\n                setIsAuthenticated(true);\r\n                if(response.accessToken) {\r\n                  setToken(response.accessToken);\r\n                }\r\n            } \r\n        }).catch(error => {\r\n            console.log(error);\r\n            setLoginError(error);\r\n        });\r\n\r\n        if (pc.getAccount()) {\r\n            setUser(pc.getAccount());\r\n            setIsAuthenticated(true);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const login = async (loginRequest, method) => {\r\n        const signInType = (isIE || isEdge) ? \"loginRedirect\" : method;\r\n        if (signInType === \"loginPopup\") {\r\n            setPopupOpen(true);\r\n\r\n            try {\r\n                await publicClient.loginPopup(loginRequest);\r\n\r\n                if (publicClient.getAccount()) {\r\n                    setUser(publicClient.getAccount());\r\n                    setIsAuthenticated(true);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                setLoginError(error);\r\n            } finally {\r\n                setPopupOpen(false);\r\n            }\r\n        } else if (signInType === \"loginRedirect\") {\r\n            setLoading(true);\r\n\r\n            publicClient.loginRedirect(loginRequest)\r\n        }\r\n    }\r\n\r\n    const logout = () => {\r\n        publicClient.logout();\r\n    }\r\n\r\n    const getTokenPopup = async (loginRequest) => {\r\n        try {\r\n            const response = await publicClient.acquireTokenSilent(loginRequest);\r\n            setToken(response.accessToken);\r\n        } catch (error) {\r\n            try {\r\n                setPopupOpen(true);\r\n                \r\n                const response = await publicClient.acquireTokenPopup(loginRequest);\r\n\r\n                setToken(response.accessToken);\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n                setLoginError(error);\r\n            }\r\n            finally {\r\n                setPopupOpen(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // This function can be removed if you do not need to support IE\r\n    const getTokenRedirect = async (loginRequest) => {\r\n        try {\r\n            setToken(await publicClient.acquireTokenSilent(loginRequest));\r\n        }\r\n        catch(error) {\r\n               \r\n            try{\r\n                setLoading(true);\r\n                \r\n                publicClient.acquireTokenRedirect(loginRequest);\r\n            }\r\n            catch(error) { \r\n                console.log(error);\r\n                setLoginError(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const getToken = async (loginRequest, method) => {\r\n        const signInType = (isIE || isEdge)? \"loginRedirect\" : method;\r\n        if(signInType === \"loginRedirect\") {\r\n            return await getTokenRedirect(loginRequest);\r\n        } else\r\n        {\r\n            return await getTokenPopup(loginRequest);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MsalContext.Provider\r\n            value={{\r\n                isAuthenticated,\r\n                user,\r\n                token,\r\n                loading,\r\n                popupOpen,\r\n                loginError,\r\n                login,\r\n                logout,\r\n                getToken\r\n            }}\r\n        >\r\n            {children}\r\n        </MsalContext.Provider>\r\n    );\r\n};","export const msalConfig = {\r\n    auth: {\r\n        clientId: \"30438524-af83-4328-8f20-2385084a30de\",\r\n        authority: 'https://login.microsoftonline.com/common/',\r\n        redirectUri: 'http://localhost:3000/',\r\n    },\r\n    cache: {\r\n        cacheLocation: \"localStorage\", // This configures where your cache will be stored\r\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    }\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const loginRequest = {\r\n    scopes: [\"openid\", \"profile\", \"User.Read\"],\r\n    forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n\r\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\r\nexport const apiRequest = {\r\n    scopes: [\"API-SCOPE\"],\r\n    forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};","import React from \"react\";\r\nimport { useMsal } from \"./msal-context\";\r\nimport { apiRequest } from \"./auth-config\";\r\n\r\nconst Welcome = () => {\r\n  const { user, logout, getToken, token, loginError } = useMsal();\r\n\r\n  return (\r\n    <div>\r\n      <h1>Welcome {user.userName}</h1>\r\n      {token && (<span>Your token is {token}</span>)}\r\n      <br></br>\r\n      <button onClick={() => getToken(apiRequest, \"loginPopup\")}>Get Token</button>\r\n      <br></br>\r\n      <button onClick={() => logout()}>Log out</button>\r\n      <br></br>\r\n      {loginError && (<span>Error: {loginError.message}</span>)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Welcome;","import React from 'react';\r\nimport './App.css';\r\nimport Welcome from \"./Welcome\";\r\n\r\nimport { useMsal } from \"./msal-context\";\r\nimport { loginRequest } from \"./auth-config\";\r\n\r\nfunction App() {\r\n  const { loading, isAuthenticated, login } = useMsal();\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!isAuthenticated && (\r\n        <button onClick={() => login(loginRequest, \"loginRedirect\")}>Log in</button>\r\n      )}\r\n      {isAuthenticated && <Welcome/>}\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { MsalProvider } from \"./msal-context\";\r\nimport { msalConfig, loginRequest } from \"./auth-config\";\r\n\r\nReactDOM.render(\r\n  <MsalProvider\r\n  config={msalConfig}\r\n  scopes={loginRequest}\r\n>\r\n  <App />\r\n</MsalProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}